
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import representaciones.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\003\005\000\002\004\004\000\002\004\003" +
    "\000\002\005\006\000\002\006\010\000\002\007\007\000" +
    "\002\007\005\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\011\005\000\002\012\004\000\002\012" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\014\011\000\002\015\011\000\002\015\012\000\002" +
    "\015\012\000\002\016\011\000\002\016\004\000\002\017" +
    "\006\000\002\020\003\000\002\020\004\000\002\020\005" +
    "\000\002\020\005\000\002\021\005\000\002\021\005\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\023" +
    "\005\000\002\023\005\000\002\023\003\000\002\024\005" +
    "\000\002\024\005\000\002\024\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\005\000\002\026" +
    "\005\000\002\027\006\000\002\030\013\000\002\031\005" +
    "\000\002\031\005\000\002\031\005\000\002\031\003\000" +
    "\002\031\003\000\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\204\000\006\036\004\040\005\001\002\000\004\043" +
    "\064\001\002\000\004\034\012\001\002\000\004\002\011" +
    "\001\002\000\004\002\000\001\002\000\004\002\uffff\001" +
    "\002\000\004\002\001\001\002\000\020\004\024\005\020" +
    "\006\027\007\017\010\021\042\025\045\023\001\002\000" +
    "\006\034\012\041\016\001\002\000\006\034\ufffc\041\ufffc" +
    "\001\002\000\006\034\ufffd\041\ufffd\001\002\000\004\002" +
    "\ufffe\001\002\000\040\013\uffcf\014\uffcf\015\uffcf\016\uffcf" +
    "\017\uffcf\020\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026" +
    "\uffcf\027\uffcf\046\uffcf\051\uffcf\053\uffcf\001\002\000\040" +
    "\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\022" +
    "\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\046\uffd0" +
    "\051\uffd0\053\uffd0\001\002\000\040\013\uffce\014\uffce\015" +
    "\uffce\016\uffce\017\uffce\020\uffce\022\uffce\023\uffce\024\uffce" +
    "\025\uffce\026\uffce\027\uffce\046\uffce\051\uffce\053\uffce\001" +
    "\002\000\040\013\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd" +
    "\020\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027" +
    "\uffcd\046\uffcd\051\uffcd\053\uffcd\001\002\000\020\004\024" +
    "\005\020\006\027\007\017\010\021\042\025\045\023\001" +
    "\002\000\040\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2" +
    "\020\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027" +
    "\uffd2\046\uffd2\051\uffd2\053\uffd2\001\002\000\004\045\031" +
    "\001\002\000\004\051\030\001\002\000\040\013\uffd1\014" +
    "\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\022\uffd1\023\uffd1" +
    "\024\uffd1\025\uffd1\026\uffd1\027\uffd1\046\uffd1\051\uffd1\053" +
    "\uffd1\001\002\000\022\004\uffcb\030\uffcb\031\uffcb\034\uffcb" +
    "\035\uffcb\041\uffcb\042\uffcb\050\uffcb\001\002\000\020\004" +
    "\024\005\020\006\027\007\017\010\021\042\025\045\023" +
    "\001\002\000\040\013\uffd6\014\uffd6\015\055\016\056\017" +
    "\uffd6\020\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6" +
    "\027\uffd6\046\uffd6\051\uffd6\053\uffd6\001\002\000\010\013" +
    "\035\014\036\053\037\001\002\000\040\013\uffd3\014\uffd3" +
    "\015\uffd3\016\uffd3\017\uffd3\020\uffd3\022\uffd3\023\uffd3\024" +
    "\uffd3\025\uffd3\026\uffd3\027\uffd3\046\uffd3\051\uffd3\053\uffd3" +
    "\001\002\000\020\004\024\005\020\006\027\007\017\010" +
    "\021\042\025\045\023\001\002\000\020\004\024\005\020" +
    "\006\027\007\017\010\021\042\025\045\023\001\002\000" +
    "\004\043\040\001\002\000\010\004\041\005\042\007\043" +
    "\001\002\000\006\044\uffc3\052\uffc3\001\002\000\006\044" +
    "\uffc5\052\uffc5\001\002\000\006\044\uffc4\052\uffc4\001\002" +
    "\000\006\044\046\052\045\001\002\000\010\004\051\005" +
    "\052\007\053\001\002\000\004\046\047\001\002\000\004" +
    "\051\050\001\002\000\060\004\uffc9\013\uffc9\014\uffc9\015" +
    "\uffc9\016\uffc9\017\uffc9\020\uffc9\022\uffc9\023\uffc9\024\uffc9" +
    "\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\034\uffc9\035" +
    "\uffc9\041\uffc9\042\uffc9\046\uffc9\050\uffc9\051\uffc9\053\uffc9" +
    "\001\002\000\006\044\uffc8\052\uffc8\001\002\000\006\044" +
    "\uffc7\052\uffc7\001\002\000\006\044\uffc6\052\uffc6\001\002" +
    "\000\040\013\uffd7\014\uffd7\015\055\016\056\017\uffd7\020" +
    "\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7" +
    "\046\uffd7\051\uffd7\053\uffd7\001\002\000\020\004\024\005" +
    "\020\006\027\007\017\010\021\042\025\045\023\001\002" +
    "\000\020\004\024\005\020\006\027\007\017\010\021\042" +
    "\025\045\023\001\002\000\040\013\uffd4\014\uffd4\015\uffd4" +
    "\016\uffd4\017\uffd4\020\uffd4\022\uffd4\023\uffd4\024\uffd4\025" +
    "\uffd4\026\uffd4\027\uffd4\046\uffd4\051\uffd4\053\uffd4\001\002" +
    "\000\040\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020" +
    "\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5" +
    "\046\uffd5\051\uffd5\053\uffd5\001\002\000\040\013\uffd8\014" +
    "\uffd8\015\055\016\056\017\uffd8\020\uffd8\022\uffd8\023\uffd8" +
    "\024\uffd8\025\uffd8\026\uffd8\027\uffd8\046\uffd8\051\uffd8\053" +
    "\uffd8\001\002\000\010\013\035\014\036\046\063\001\002" +
    "\000\040\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020" +
    "\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc" +
    "\046\uffcc\051\uffcc\053\uffcc\001\002\000\004\004\167\001" +
    "\002\000\004\037\066\001\002\000\004\040\070\001\002" +
    "\000\004\002\ufffb\001\002\000\016\004\100\030\076\031" +
    "\101\034\012\035\102\042\025\001\002\000\022\004\ufff0" +
    "\030\ufff0\031\ufff0\034\ufff0\035\ufff0\041\ufff0\042\ufff0\050" +
    "\ufff0\001\002\000\022\004\ufff1\030\ufff1\031\ufff1\034\ufff1" +
    "\035\ufff1\041\ufff1\042\ufff1\050\ufff1\001\002\000\022\004" +
    "\uffec\030\uffec\031\uffec\034\uffec\035\uffec\041\uffec\042\uffec" +
    "\050\uffec\001\002\000\022\004\ufff2\030\ufff2\031\ufff2\034" +
    "\ufff2\035\ufff2\041\ufff2\042\ufff2\050\ufff2\001\002\000\022" +
    "\004\uffed\030\uffed\031\uffed\034\uffed\035\uffed\041\uffed\042" +
    "\uffed\050\uffed\001\002\000\004\045\161\001\002\000\020" +
    "\004\100\030\076\031\101\034\012\035\102\041\160\042" +
    "\025\001\002\000\004\012\155\001\002\000\004\045\104" +
    "\001\002\000\022\004\uffee\030\uffee\031\uffee\034\uffee\035" +
    "\uffee\041\uffee\042\uffee\050\uffee\001\002\000\022\004\uffef" +
    "\030\uffef\031\uffef\034\uffef\035\uffef\041\uffef\042\uffef\050" +
    "\uffef\001\002\000\022\004\024\005\020\006\027\007\017" +
    "\010\021\021\105\042\025\045\110\001\002\000\020\004" +
    "\024\005\020\006\027\007\017\010\021\042\025\045\110" +
    "\001\002\000\010\017\150\020\151\046\uffe4\001\002\000" +
    "\022\013\035\014\036\022\143\023\141\024\142\025\137" +
    "\026\140\027\145\001\002\000\020\004\024\005\020\006" +
    "\027\007\017\010\021\042\025\045\110\001\002\000\004" +
    "\046\112\001\002\000\004\047\113\001\002\000\016\004" +
    "\100\030\076\031\101\034\012\035\102\042\025\001\002" +
    "\000\020\004\100\030\076\031\101\034\012\035\102\042" +
    "\025\050\116\001\002\000\022\004\ufff3\030\ufff3\031\ufff3" +
    "\034\ufff3\035\ufff3\041\ufff3\042\ufff3\050\ufff3\001\002\000" +
    "\026\004\uffea\030\uffea\031\uffea\032\117\033\121\034\uffea" +
    "\035\uffea\041\uffea\042\uffea\050\uffea\001\002\000\004\045" +
    "\127\001\002\000\022\004\uffe9\030\uffe9\031\uffe9\034\uffe9" +
    "\035\uffe9\041\uffe9\042\uffe9\050\uffe9\001\002\000\004\047" +
    "\124\001\002\000\024\004\uffe8\030\uffe8\031\uffe8\033\121" +
    "\034\uffe8\035\uffe8\041\uffe8\042\uffe8\050\uffe8\001\002\000" +
    "\024\004\uffe6\030\uffe6\031\uffe6\033\uffe6\034\uffe6\035\uffe6" +
    "\041\uffe6\042\uffe6\050\uffe6\001\002\000\016\004\100\030" +
    "\076\031\101\034\012\035\102\042\025\001\002\000\020" +
    "\004\100\030\076\031\101\034\012\035\102\042\025\050" +
    "\126\001\002\000\024\004\uffe5\030\uffe5\031\uffe5\033\uffe5" +
    "\034\uffe5\035\uffe5\041\uffe5\042\uffe5\050\uffe5\001\002\000" +
    "\022\004\024\005\020\006\027\007\017\010\021\021\105" +
    "\042\025\045\110\001\002\000\004\046\131\001\002\000" +
    "\004\047\132\001\002\000\016\004\100\030\076\031\101" +
    "\034\012\035\102\042\025\001\002\000\020\004\100\030" +
    "\076\031\101\034\012\035\102\042\025\050\134\001\002" +
    "\000\024\004\uffe7\030\uffe7\031\uffe7\033\uffe7\034\uffe7\035" +
    "\uffe7\041\uffe7\042\uffe7\050\uffe7\001\002\000\004\046\147" +
    "\001\002\000\024\013\035\014\036\022\143\023\141\024" +
    "\142\025\137\026\140\027\145\046\063\001\002\000\020" +
    "\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb\042\uffdb\045" +
    "\uffdb\001\002\000\020\004\uffda\005\uffda\006\uffda\007\uffda" +
    "\010\uffda\042\uffda\045\uffda\001\002\000\020\004\uffdd\005" +
    "\uffdd\006\uffdd\007\uffdd\010\uffdd\042\uffdd\045\uffdd\001\002" +
    "\000\020\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\042" +
    "\uffdc\045\uffdc\001\002\000\020\004\uffde\005\uffde\006\uffde" +
    "\007\uffde\010\uffde\042\uffde\045\uffde\001\002\000\020\004" +
    "\024\005\020\006\027\007\017\010\021\042\025\045\023" +
    "\001\002\000\020\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010" +
    "\uffd9\042\uffd9\045\uffd9\001\002\000\014\013\035\014\036" +
    "\017\uffe0\020\uffe0\046\uffe0\001\002\000\010\017\uffdf\020" +
    "\uffdf\046\uffdf\001\002\000\020\004\024\005\020\006\027" +
    "\007\017\010\021\042\025\045\110\001\002\000\020\004" +
    "\024\005\020\006\027\007\017\010\021\042\025\045\110" +
    "\001\002\000\004\046\uffe1\001\002\000\004\046\uffe2\001" +
    "\002\000\004\046\uffe3\001\002\000\020\004\024\005\020" +
    "\006\027\007\017\010\021\042\025\045\023\001\002\000" +
    "\010\013\035\014\036\051\157\001\002\000\022\004\uffca" +
    "\030\uffca\031\uffca\034\uffca\035\uffca\041\uffca\042\uffca\050" +
    "\uffca\001\002\000\004\002\ufff4\001\002\000\022\004\024" +
    "\005\020\006\027\007\017\010\021\021\105\042\025\045" +
    "\110\001\002\000\004\046\163\001\002\000\004\047\164" +
    "\001\002\000\016\004\100\030\076\031\101\034\012\035" +
    "\102\042\025\001\002\000\020\004\100\030\076\031\101" +
    "\034\012\035\102\042\025\050\166\001\002\000\022\004" +
    "\uffeb\030\uffeb\031\uffeb\034\uffeb\035\uffeb\041\uffeb\042\uffeb" +
    "\050\uffeb\001\002\000\006\044\172\052\171\001\002\000" +
    "\010\054\202\055\177\056\200\001\002\000\004\004\175" +
    "\001\002\000\004\011\173\001\002\000\004\043\174\001" +
    "\002\000\010\054\ufff8\055\ufff8\056\ufff8\001\002\000\006" +
    "\044\172\052\171\001\002\000\010\054\202\055\177\056" +
    "\200\001\002\000\006\044\ufff6\052\ufff6\001\002\000\006" +
    "\044\ufff5\052\ufff5\001\002\000\004\052\203\001\002\000" +
    "\006\044\ufff7\052\ufff7\001\002\000\010\054\ufff9\055\ufff9" +
    "\056\ufff9\001\002\000\004\044\205\001\002\000\004\051" +
    "\206\001\002\000\004\037\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\204\000\010\002\005\003\007\005\006\001\001\000" +
    "\004\006\064\001\001\000\006\004\012\026\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\025\025\030\021\001\001\000\004" +
    "\026\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\023\061\024\031\025" +
    "\033\030\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\023\032\024\031\025\033\030\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\024" +
    "\060\025\033\030\021\001\001\000\010\024\053\025\033" +
    "\030\021\001\001\000\002\001\001\000\004\031\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\025" +
    "\057\030\021\001\001\000\006\025\056\030\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\066\001\001\000\002\001\001\000" +
    "\020\012\076\013\073\014\071\015\070\026\102\027\074" +
    "\030\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\013\114\014\071\015\070\026\102\027" +
    "\074\030\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\020\110\021" +
    "\105\023\106\024\031\025\033\030\021\001\001\000\014" +
    "\021\153\023\106\024\031\025\033\030\021\001\001\000" +
    "\002\001\001\000\004\022\143\001\001\000\014\021\134" +
    "\023\135\024\031\025\033\030\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\012\113\013\073\014\071" +
    "\015\070\026\102\027\074\030\072\001\001\000\016\013" +
    "\114\014\071\015\070\026\102\027\074\030\072\001\001" +
    "\000\002\001\001\000\006\016\121\017\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\122\001\001\000\002\001\001\000\020\012\124\013" +
    "\073\014\071\015\070\026\102\027\074\030\072\001\001" +
    "\000\016\013\114\014\071\015\070\026\102\027\074\030" +
    "\072\001\001\000\002\001\001\000\016\020\127\021\105" +
    "\023\106\024\031\025\033\030\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\012\132\013\073\014\071" +
    "\015\070\026\102\027\074\030\072\001\001\000\016\013" +
    "\114\014\071\015\070\026\102\027\074\030\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\023\145\024" +
    "\031\025\033\030\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\021\152\023\106\024" +
    "\031\025\033\030\021\001\001\000\014\021\151\023\106" +
    "\024\031\025\033\030\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\023\155\024\031" +
    "\025\033\030\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\020\161\021\105\023\106" +
    "\024\031\025\033\030\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\012\164\013\073\014\071\015\070" +
    "\026\102\027\074\030\072\001\001\000\016\013\114\014" +
    "\071\015\070\026\102\027\074\030\072\001\001\000\002" +
    "\001\001\000\004\007\167\001\001\000\004\010\203\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\175\001\001\000\004\010" +
    "\200\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol symbol;
    private ArrayList<Regla> reglas = new ArrayList<Regla>();

    /* Metodo al que se llama automaticamente ante algun error sintactico*/
    public void syntax_error(Symbol s) {
        this.symbol = s;

        // Extraer información relevante
        int linea = s.right + 1;
        int columna = s.left;
        Object valor = s.value;

        // Construir el mensaje de error
        StringBuilder mensaje = new StringBuilder();
        mensaje.append("¡ERROR DE SINTAXIS ENCONTRADO!\nDetalles:\n");
        mensaje.append("    - Línea: ").append(linea).append("\n");
        mensaje.append("    - Columna: ").append(columna).append("\n");
        mensaje.append("    - Token no reconocido: '").append(valor).append("'\n");
        // Posible sugerencia de corrección
        mensaje.append("Sugerencia: Revisa el uso de los símbolos o palabras clave cerca de esta posición.\n");

        System.out.println(mensaje);

        mostrarReglas();
    }

    public Symbol getSymbol(){
        return this.symbol;
    }

    public void mostrarReglas(){
        System.out.println("\n\nESTADO DE LAS REGLAS LEÍDAS:\n");
        int contador = 1;
        for(Regla regla:reglas){
            System.out.println("Orden de aplicación: " + contador + "  " + regla.getReglaSinFormato() + "\n");
            contador += 1;
        }
    }

    public ArrayList<Regla> getReglas(){
        return reglas;
    }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {




  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s ::= declaracion 
            {
              Object RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object decl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 mostrarReglas(); reglas.add(new Regla(0, "start --> declaracion")); RESULT = decl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // s ::= prog_inmutable 
            {
              Object RESULT =null;
		int progInmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int progInmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object progInm = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 mostrarReglas(); reglas.add(new Regla(1, "start --> prog sin variables")); RESULT = progInm; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // prog_inmutable ::= ABRIR_PROG bloqueCodigoInm CERRAR_PROG 
            {
              Object RESULT =null;
		int openprogleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int openprogright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object openprog = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int blqInmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int blqInmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object blqInm = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int endprogleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int endprogright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object endprog = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla(2, "prog sin variables --> " + openprog + " <bloque> " + endprog)); RESULT = (String) openprog + blqInm + endprog; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog_inmutable",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bloqueCodigoInm ::= bloqueCodigoInm write 
            {
              Object RESULT =null;
		int blqInmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int blqInmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object blqInm = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int writeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int writeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object write = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla (3, "bloque --> <bloque> <write>")); RESULT = (String) blqInm + write; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueCodigoInm",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // bloqueCodigoInm ::= write 
            {
              Object RESULT =null;
		int writeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int writeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object write = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla(4, "bloque --> <write>")); RESULT = write; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueCodigoInm",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracion ::= ABRIR_DECLA variables CERRAR_DECLA programa 
            {
              Object RESULT =null;
		int opendeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int opendeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object opendecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int enddeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int enddeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object enddecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int progleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int progright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object prog = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla(5, "declaracion --> " + opendecl + " <variables> " + enddecl + " <programa>"));
                                                                                          RESULT = (String) opendecl + vars + enddecl + prog;
                                                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // variables ::= ABRIR_LISTA ID incrementar type CERRAR_LISTA TOK_EOI 
            {
              Object RESULT =null;
		int openlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int openlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object openl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int incrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int incrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object incr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int endlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int endlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object endl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eoileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eoiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object eoi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla(6, "variables --> " + openl + "ID= " + id + " <incrementar> Tipo= " + type + endl + eoi,  (String) id, (String) type));
                                                                                                  RESULT = (String) openl + id + incr + type + endl + eoi;
                                                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // incrementar ::= TOK_SEP ID incrementar type TOK_SEP 
            {
              Object RESULT =null;
		int sepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sepright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object sep = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int incrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int incrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object incr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 reglas.add(new Regla(7, "incrementar --> " + sep + " ID= " + id + " <incrementar> Tipo= " + type + sep, (String) id, (String) type)); RESULT = (String) sep + id + incr + type + sep; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("incrementar",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // incrementar ::= CERRAR_LISTA OP_DECLA ABRIR_LISTA 
            {
              Object RESULT =null;
		int endlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int endlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object endl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object decl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int openlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int openlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object openl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla(8, "incrementar --> " + endl + decl + openl)); RESULT = (String) endl + decl + openl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("incrementar",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= TYPE_INT 
            {
              Object RESULT =null;
		int tintleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tintright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tint = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla (9, "type --> " + tint )); RESULT = tint; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= TYPE_FLOAT 
            {
              Object RESULT =null;
		int tfloatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tfloatright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tfloat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla (10, "type --> " + tfloat)); RESULT = tfloat; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= TYPE_STR 
            {
              Object RESULT =null;
		int tstrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tstrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tstr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla (11, "type --> " + tstr)); RESULT = tstr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // programa ::= ABRIR_PROG bloqueCodigo CERRAR_PROG 
            {
              Object RESULT =null;
		int openprogleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int openprogright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object openprog = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bloqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object bloq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int endprogleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int endprogright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object endprog = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla (12, "programa --> " + openprog + " <bloque> " + endprog)); RESULT = (String) openprog + bloq + endprog; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // bloqueCodigo ::= bloqueCodigo instruccion 
            {
              Object RESULT =null;
		int bloqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bloqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object bloq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla (13, "bloque --> <bloque> <instruccion>")); RESULT = (String) bloq + inst; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueCodigo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // bloqueCodigo ::= instruccion 
            {
              Object RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla(14, "bloque --> <instruccion>")); RESULT = inst; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueCodigo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= while 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla(15, "instruccion --> <while>")); RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= if 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla(16, "instruccion --> <if>")); RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= write 
            {
              Object RESULT =null;
		int writeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int writeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object write = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla (17, "instruccion --> <write>")); RESULT = write; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= RETURN 
            {
              Object RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int retright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ret = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla(18, "instruccion --> " + ret)); RESULT = ret; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= asignacion 
            {
              Object RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla (19,"instruccion --> <asignacion>")); RESULT = asig; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= function 
            {
              Object RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla(20, "instruccion --> <function>")); RESULT = fn; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // while ::= CL_WHILE ABRIR_COND condicion CERRAR_COND ABRIR_BLOQUE bloqueCodigo CERRAR_BLOQUE 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int openclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int openclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object opencl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int endclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int endclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object endcl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int openblleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int openblright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object openbl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bloqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object bloq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int endblleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int endblright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object endbl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla (21, "while --> " + w + opencl + "<condicion>" + endcl + openbl + "<bloque>" + endbl));
                                                                                                                                     RESULT = (String) w + opencl + cond + endcl + openbl + bloq + endbl;
                                                                                                                                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // if ::= DECL_IF ABRIR_COND condicion CERRAR_COND ABRIR_BLOQUE bloqueCodigo CERRAR_BLOQUE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int openclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int openclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object opencl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int endclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int endclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object endcl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int openblleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int openblright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object openbl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bloqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object bloq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int endblleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int endblright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object endbl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla (22, "if --> " + i + opencl + "<condicion>" + endcl + openbl + "<bloque>" + endbl));
                                                                                                                                        RESULT = (String) i + opencl + cond + endcl + openbl + bloq + endbl;
                                                                                                                                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // if ::= DECL_IF ABRIR_COND condicion CERRAR_COND ABRIR_BLOQUE bloqueCodigo CERRAR_BLOQUE else 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int openclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int openclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object opencl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int endclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int endclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object endcl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int openblleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int openblright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object openbl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bloqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bloqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object bloq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int endblleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int endblright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object endbl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla (23, "if --> " + i + opencl + "<condicion>" + endcl + openbl + "<bloque>" + endbl + el)); RESULT = (String) i + opencl + cond + endcl + openbl + bloq + endbl + el; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // if ::= DECL_IF ABRIR_COND condicion CERRAR_COND ABRIR_BLOQUE bloqueCodigo CERRAR_BLOQUE elif 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int openclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int openclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object opencl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int endclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int endclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object endcl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int openblleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int openblright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object openbl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bloqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bloqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object bloq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int endblleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int endblright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object endbl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla (24, "if --> " + i + opencl + "<condicion>" + endcl + openbl + "<bloque>" + endbl + e)); RESULT = (String) i + opencl + cond + endcl + openbl + bloq + endbl + e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // elif ::= DECL_ELIF ABRIR_COND condicion CERRAR_COND ABRIR_BLOQUE bloqueCodigo CERRAR_BLOQUE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int openclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int openclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object opencl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int endclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int endclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object endcl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int openblleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int openblright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object openbl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bloqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object bloq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int endblleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int endblright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object endbl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla (25, "elif --> " + e + opencl + "<condicion>" + endcl + openbl + "<bloque>" + endbl));
                                                                                                                                                    RESULT = (String) e + opencl + cond + endcl + openbl + bloq + endbl;
                                                                                                                                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // elif ::= elif else 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla (26, "elif --> <elif> <else>")); RESULT = (String) e + el; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // else ::= DECL_ELSE ABRIR_BLOQUE bloqueCodigo CERRAR_BLOQUE 
            {
              Object RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ableft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int abright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ab = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bloqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object bloq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cb = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla (27, "else --> " + el + ab + "<bloque>" + cb)); RESULT = (String) el + ab + bloq + cb; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // condicion ::= comparacion 
            {
              Object RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int compright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object comp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla (28, "condicion --> <comparacion>")); RESULT = comp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // condicion ::= OP_NOT comparacion 
            {
              Object RESULT =null;
		int opnotleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opnotright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object opnot = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int compright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object comp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla (29, "condicion --> " + opnot + "<comparacion>")); RESULT = (String) opnot + comp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // condicion ::= comparacion OP_AND comparacion 
            {
              Object RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object comp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opandleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opandright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object opand = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int comp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int comp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object comp2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla (30, "condicion --> <comparacion> " + opand + " <comparacion>")); RESULT = (String) comp + opand + comp2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // condicion ::= comparacion OP_OR comparacion 
            {
              Object RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object comp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oporleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oporright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object opor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int comp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int comp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object comp2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla (31, "condicion --> <comparacion> " + opor + " <comparacion>")); RESULT = (String) comp + opor + comp2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // comparacion ::= expresion comparador expresion 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int comprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int comprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object compr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla (32, "comparacion --> <expresion> <comparador> <expresion>")); RESULT = (String) exp + compr + exp2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // comparacion ::= ABRIR_COND comparacion CERRAR_COND 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 reglas.add(new Regla(33, "comparacion --> (" + com +")")); RESULT = com; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // comparador ::= COND_IGUAL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla (34, "comparador --> " + i)); RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comparador ::= COND_DIST 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla (35, "comparador --> " + d)); RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // comparador ::= COND_MAYOR 
            {
              Object RESULT =null;
		int mayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object may = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla (36, "comparador --> " + may)); RESULT = may; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comparador ::= COND_MENOR 
            {
              Object RESULT =null;
		int menleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int menright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object men = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla (37, "comparador --> " + men)); RESULT = men; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comparador ::= COND_MAYORI 
            {
              Object RESULT =null;
		int mayileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mayiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object mayi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla (38, "comparador --> " + mayi)); RESULT = mayi; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // comparador ::= COND_MENORI 
            {
              Object RESULT =null;
		int menileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int meniright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object meni = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla (39, "comparador --> " + meni)); RESULT = meni; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= expresion OP_SUMA termino 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sumaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sumaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object suma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla (40, "expresion --> <expresion> " + suma + " <termino>")); RESULT = (String) exp + suma + term; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= expresion OP_RESTA termino 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int restaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int restaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object resta = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla (41, "expresion --> <expresion> " + resta + " <termino>")); RESULT = (String) exp + resta + term; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion ::= termino 
            {
              Object RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla (42, "expresion --> <termino>")); RESULT = term; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // termino ::= termino OP_PROD factor 
            {
              Object RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int prodleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int prodright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object prod = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int factleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int factright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fact = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla (43, "termino --> <termino> " + prod + " <factor> valor= " + fact)); RESULT = (String) term + prod + fact; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // termino ::= termino OP_DIV factor 
            {
              Object RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int divleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int divright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object div = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int factleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int factright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fact = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla (44, "termino --> <termino> " + div + " <factor> valor= " + fact)); RESULT = (String) term + div + fact; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // termino ::= factor 
            {
              Object RESULT =null;
		int factleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int factright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fact = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla (45, "termino --> <factor> valor= " + fact)); RESULT = fact; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // factor ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla (46, "factor --> ID= " + id)); RESULT = id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // factor ::= CTE_BIN 
            {
              Object RESULT =null;
		int binleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int binright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object bin = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla (47, "factor --> " + bin)); RESULT = bin; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // factor ::= CTE_INT 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla (48, "factor --> " + ent)); RESULT = ent; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // factor ::= CTE_REAL 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla (49, "factor --> " + r)); RESULT = r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // factor ::= CTE_STRING 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla (50, "factor --> " + st)); RESULT = st; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // factor ::= function 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object func = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla (51, "factor --> " + func)); RESULT = func; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // factor ::= ABRIR_COND expresion CERRAR_COND 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int parcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object parc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla(52, "factor --> " + ex)); RESULT = ex; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // write ::= OUTPUT factor TOK_EOI 
            {
              Object RESULT =null;
		int outleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int outright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object out = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int factleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int factright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object fact = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eoileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eoiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object eoi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla (53, "write --> " + out + " <factor> " + eoi)); RESULT = (String) out + fact + eoi; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // asignacion ::= ID OP_ASIGN expresion TOK_EOI 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eoileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eoiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object eoi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla (54, "asignacion --> ID= " + id + asig + "<expresion>" + eoi)); RESULT = (String) id + asig + exp + eoi; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // function ::= FUNC_COUNTDISTINCT ABRIR_COND expresion TOK_DOSP ABRIR_LISTA lista CERRAR_LISTA CERRAR_COND TOK_EOI 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object ac = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object al = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object cl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eoileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eoiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object eoi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla (55, "function --> " + f + ac + "<expresion>" + d + al + "<lista>" + cl + cc + eoi));
                   RESULT = (String) f + ac + exp + d + al + lista + cl + cc + eoi;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // lista ::= lista TOK_SEP ID 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sepright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sep = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla (56, "lista --> <lista> " + sep + id)); RESULT = (String) lista + sep + id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // lista ::= lista TOK_SEP CTE_INT 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sepright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sep = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int entleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla (57, "lista --> <lista> " + sep + ent)); RESULT = (String) lista + sep + ent; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // lista ::= lista TOK_SEP CTE_REAL 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sepright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sep = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int realleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int realright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object real = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla (58, "lista --> <lista> " + sep + real)); RESULT = (String) lista + sep + real; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // lista ::= CTE_INT 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla (59, "lista --> " + ent)); RESULT = ent; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // lista ::= CTE_REAL 
            {
              Object RESULT =null;
		int realleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int realright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object real = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla (60, "lista --> " + real)); RESULT = real; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // lista ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add(new Regla (61, "lista --> " + id)); RESULT = id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
