import jav_cup.runtime.*;

parser code
{:

    private List<String> reglas = new ArrayList<>();
    /* Metodo al que se llama automaticamente ante algun error sintactico*/
    public void syntax_error(Symbol s) {
        System.out.println("Error en la linea " + (s.right+1) + " columna " + s.left + ". "
            + s + "no reconocido. valor " + s.value);
    }

    public ArrayList<String> getReglas(){
        return reglas;
    }
:}

action code
{:
:}

/* Declaracion de Terminales */
terminal ID, CTE_INT, CTE_BIN, CTE_REAL, CTE_STRING, ESPACIO, COMENTARIOS, NUMERICO, ALFANUM, ALFABETICO,
         OP_DECLA, OP_ASIGN, OP_SUMA, OP_RESTA, OP_PROD, OP_DIV, OP_AND, OP_OR, OP_NOT,
         COND_IGUAL, COND_DIST, COND_MAYOR, COND_MENOR, COND_MAYORI, COND_MENORI,
         CL_WHILE, DECL_IF, DECL_ELIF, DECL_ELSE, OUTPUT, RETURN, ABRIR_DECLA, CERRAR_DECLA, ABRIR_PROG, CERRAR_PROG, FUNC_COUNTDISTINCT,
         ABRIR_LISTA, CERRAR_LISTA, ABRIR_COND, CERRAR_COND, ABRIR_BLOQUE, CERRAR_BLOQUE, TOK_EOI, TOK_SEP, TOK_DOSP,
         TYPE_INT, TYPE_FLOAT, TYPE_STR;

/* Declaracion de No Terminales */
non terminal s, prog_inmutable, bloqueCodigoInm, declaracion, variables, incrementar, type, programa, bloqueCodigo,
             instruccion, while, if, elif, else, condicion, comparacion, comparador, expresion, termino, factor, write, asignacion, function, lista;


start with s;

s ::= declaracion:decl {: reglas.add("[Regla 0] start --> declaracion"); :}
    | prog_inmutable:progInm {: reglas.add("[Regla 1] start --> prog sin variables"); :};

prog_inmutable ::= ABRIR_PROG:openprog bloqueCodigoInm:blqInm CERRAR_PROG:endprog {: reglas.add("[Regla 2] prog sin variables --> " + openprog + " <bloque> " + endprog); :};

bloqueCodigoInm ::= bloqueCodigoInm:blqInm write:write {: reglas.add("[Regla 3] bloque --> <bloque> <write>"); :}
                  | write:write {: reglas.add("[Regla 4] bloque --> <write>"); :};

declaracion ::= ABRIR_DECLA:opendecl variables:vars CERRAR_DECLA:enddecl programa:prog {: reglas.add("[Regla 5] declaracion --> " + opendecl + " <variables> " + enddecl + " <programa>"); :};

variables ::= ABRIR_LISTA:openl ID:id incrementar:incr type:type CERRAR_LISTA:endl TOK_EOI:eoi {: reglas.add("[Regla 6] variables --> " + openl + "ID= " + id + " <incrementar> Tipo= " + type + endl + eoi); :};

incrementar ::= TOK_SEP:sep ID:id incrementar:incr type:type TOK_SEP {: reglas.add("[Regla 7] incrementar --> " + sep + " ID= " + id + " <incrementar> Tipo= " + type + sep); :}
              | CERRAR_LISTA:endl OP_DECLA:decl ABRIR_LISTA:openl {: reglas.add("[Regla 8] incrementar --> " + endl + decl + openl); :};

type ::= TYPE_INT:tint {: reglas.add("[Regla 9] type --> " + tint ); :}
       | TYPE_FLOAT:tfloat {: reglas.add("[Regla 10] type --> " + tfloat); :}
       | TYPE_STR:tstr {: reglas.add("[Regla 11] type --> " + tstr); :};

programa ::= ABRIR_PROG:openprog bloqueCodigo:bloq CERRAR_PROG:endprog {: reglas.add("[Regla 12] programa --> " + openprog + " <bloque> " + endprog); :};

bloqueCodigo ::= bloqueCodigo:bloq instruccion:inst {: reglas.add("[Regla 13] bloque --> <bloque> <instruccion>"); :}
               | instruccion:inst {: reglas.add("[Regla 14] bloque --> <instruccion>"); :};

instruccion ::= while:while {: reglas.add("[Regla 15] instruccion --> <while>"); :}
              | if:if {: reglas.add("[Regla 16] instruccion --> <if>"); :}
              | write:write {: reglas.add("[Regla 17] instruccion --> <write>"); :}
              | return:return {: reglas.add("[Regla 18] instruccion --> <return>"); :}
              | asignacion:asig {: reglas.add("[Regla 19] instruccion --> <asignacion>"); :};

while ::= CL_WHILE:w ABRIR_COND:opencl condicion:cond CERRAR_COND:endcl ABRIR_BLOQUE:openbl bloqueCodigo:bloq CERRAR_BLOQUE:endbl {: reglas.add("[Regla 20] while --> " + w + opencl + "<condicion>" + endcl + openbl + "<bloque>" + endbl); :};

if ::= DECL_IF:i ABRIR_COND:opencl condicion:cond CERRAR_COND:endcl ABRIR_BLOQUE:openbl bloqueCodigo:bloq CERRAR_BLOQUE:endbl {: reglas.add("[Regla 21] if --> " + i + opencl + "<condicion>" + endcl + openbl + "<bloque>" + endbl); :};

elif ::= if:if DECL_ELIF:el ABRIR_COND:opencl condicion:cond CERRAR_COND:endcl ABRIR_BLOQUE:openbl bloqueCodigo:bloq CERRAR_BLOQUE:endbl {: reglas.add("[Regla 22] elif --> <if> " + el + opencl + "<condicion>" + endcl + openbl + "<bloque>" + endbl); :};

else ::= if:if DECL_ELSE:e ABRIR_BLOQUE:ab bloqueCodigo:bloq CERRAR_BLOQUE:cb {: reglas.add("[Regla 23] else --> <if> " + e + ab + "<bloque>" + cb); :}
       | elif:elif DECL_ELSE:e ABRIR_BLOQUE:ab bloqueCodigo:bloq CERRAR_BLOQUE:cb {: reglas.add("[Regla 24] else --> <elif> " + e + ab + "<bloque>" + cb); :};

condicion ::= comparacion:comp {: reglas.add("[Regla 25] condicion --> <comparacion>"); :}
            | OP_NOT:opnot comparacion:comp {: reglas.add("[Regla 26] condicion --> " + opnot + "<comparacion>"); :}
            | comparacion:comp OP_AND:opand comparacion:comp2 {: reglas.add("[Regla 27] condicion --> <comparacion> " + opand + " <comparacion>"); :}
            | comparacion:comp OP_OR:opor comparacion:comp2 {: reglas.add("[Regla 28] condicion --> <comparacion> " + opor + " <comparacion>"); :};

comparacion ::= expresion:exp comparador:compr expresion:exp2 {: reglas.add("[Regla 29] comparacion --> <expresion> <comparador> <expresion>"); :};

comparador ::= COND_IGUAL:i {: reglas.add("[Regla 30] comparador --> " + i); :}
             | COND_DIST:d {: reglas.add("[Regla 31] comparador --> " + d); :}
             | COND_MAYOR:may {: reglas.add("[Regla 32] comparador --> " + may); :}
             | COND_MENOR:men {: reglas.add("[Regla 33] comparador --> " + men); :}
             | COND_MAYORI:mayi {: reglas.add("[Regla 34] comparador --> " + mayi); :}
             | COND_MENORI:meni {: reglas.add("[Regla 35] comparador --> " + meni); :};

expresion ::= expresion:exp OP_SUMA:suma termino:term {: reglas.add("[Regla 36] expresion --> <expresion> " + suma + " <termino>"); :}
            | expresion:exp OP_RESTA:resta termino:term {: reglas.add("[Regla 37] expresion --> <expresion> " + resta + " <termino>"); :}
            | termino:term {: reglas.add("[Regla 38] expresion --> <termino>"); :};

termino ::= termino:term OP_PROD:prod factor:fact {: reglas.add("[Regla 39] termino --> <termino> " + prod + " <factor> valor= " + fact); :}
          | termino:term OP_DIV:div factor:fact {: reglas.add("[Regla 40] termino --> <termino> " + div + " <factor> valor= " + fact); :}
          | factor:fact {: reglas.add("[Regla 41] termino --> <factor> valor= " + fact); :};

factor ::= ID:id {: reglas.add("[Regla 42] factor --> ID= " + id); :}
         | CTE_BIN:bin {: reglas.add("[Regla 43] factor --> " + bin); :}
         | CTE_INT:ent {: reglas.add("[Regla 44] factor --> " + ent); :}
         | CTE_REAL:r {: reglas.add("[Regla 45] factor -->" + r); :}
         | function:func {: reglas.add("[Regla 46] factor -->" + func); :};

write ::= OUTPUT factor:fact TOK_EOI {::}
        | OUTPUT CTE_STRING TOK_EOI {::};

asignacion ::= ID OP_ASIGN expresion:exp TOK_EOI {::};

function ::= FUNC_COUNTDISTINCT ABRIR_COND expresion:exp TOK_DOSP ABRIR_LISTA lista:lista CERRAR_LISTA CERRAR_COND TOK_EOI {::};

lista ::= lista:lista TOK_SEP ID {::}
        | lista:lista TOK_SEP CTE_INT {::}
        | lista:lista TOK_SEP CTE_REAL {::}
        | CTE_INT {::}
        | CTE_REAL {::}
        | ID {::};
