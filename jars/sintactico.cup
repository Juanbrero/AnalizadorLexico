import java_cup.runtime.*;
import java.util.ArrayList;
import representaciones.*;
import java.util.Map;
import java.util.List;
import java.util.HashMap;
import exceptions.*;

parser code
{:
    private Symbol symbol;
    private ArrayList<Regla> reglas = new ArrayList<Regla>();
    private ArrayList<String> IDs = new ArrayList<>();
    private ArrayList<String> tipos = new ArrayList<>();
    private Map<String, String> declaraciones = new HashMap<>();

    /* Metodo al que se llama automaticamente ante algun error sintactico*/
    public void syntax_error(Symbol s) throws RuntimeException {
            this.symbol = s;

            // Extraer información relevante
            int linea = s.right + 1;
            int columna = s.left;
            Object valor = s.value;

            // Construir el mensaje de error
            StringBuilder mensaje = new StringBuilder();
            mensaje.append("¡ERROR DE SINTAXIS ENCONTRADO!\nDetalles:\n");
            mensaje.append("    - Línea: ").append(linea).append("\n");
            mensaje.append("    - Carácter nro: ").append(columna).append("\n");
            mensaje.append("    - Token fuera de contexto: '").append(valor).append("'\n");
            // Posible sugerencia de corrección
            mensaje.append("Sugerencia: Revisa el uso de los símbolos o palabras clave cerca de esta posición.\n");

            System.out.println(mensaje);

            mostrarReglas();
            throw new RuntimeException(mensaje.toString());
        }

    public Symbol getSymbol(){
        return this.symbol;
    }

    public void mostrarReglas(){
        System.out.println("\n\nESTADO DE LAS REGLAS LEÍDAS:\n");
        int contador = 1;
        for(Regla regla:reglas){
            System.out.println("Orden de aplicación: " + contador + "  " + regla.getReglaSinFormato() + "\n");
            contador += 1;
        }
    }

    public ArrayList<Regla> getReglas(){
        return reglas;
    }

    public Map<String, String> getDeclaraciones() {
        return declaraciones;
    }

    private void matchingTypes() {
        for (int i = 0; i < IDs.size() ; i++) {
            declaraciones.put(IDs.get(i), tipos.remove(tipos.size() - 1));
        }
        this.IDs = new ArrayList<>();
        this.tipos = new ArrayList<>();
    }
:}

action code
{:

:}

/* Declaracion de Terminales */
terminal ID, CTE_INT, CTE_BIN, CTE_REAL, CTE_STRING,
         OP_DECLA, OP_ASIGN, OP_SUMA, OP_RESTA, OP_PROD, OP_DIV, OP_AND, OP_OR, OP_NOT,
         COND_IGUAL, COND_DIST, COND_MAYOR, COND_MENOR, COND_MAYORI, COND_MENORI,
         CL_WHILE, DECL_IF, DECL_ELIF, DECL_ELSE, OUTPUT, RETURN, ABRIR_DECLA, CERRAR_DECLA, ABRIR_PROG, CERRAR_PROG, FUNC_COUNTDISTINCT,
         ABRIR_LISTA, CERRAR_LISTA, ABRIR_COND, CERRAR_COND, ABRIR_BLOQUE, CERRAR_BLOQUE, TOK_EOI, TOK_SEP, TOK_DOSP,
         TYPE_INT, TYPE_FLOAT, TYPE_STR;

/* Declaracion de No Terminales */
non terminal s, prog_inmutable, bloqueCodigoInm, declaracion, variables, incrementar, type, programa, bloqueCodigo,
             instruccion, while, if, elif, else, condicion, comparacion, comparador, expresion, termino, factor, write, asignacion, function, lista;


start with s;

s ::= declaracion:decl {: mostrarReglas(); reglas.add(new Regla(0, "<start> ::= <declaracion>")); RESULT = decl; :}
    | prog_inmutable:progInm {: mostrarReglas(); reglas.add(new Regla(2, "<start> ::= <prog_inmutable>")); RESULT = progInm; :};

prog_inmutable ::= ABRIR_PROG:openprog bloqueCodigoInm:blqInm CERRAR_PROG:endprog {: reglas.add(new Regla(3, "<prog_inmutable> ::= " + openprog + " <bloqueCodigoInm> " + endprog)); RESULT = (String) openprog + blqInm + endprog; :};

bloqueCodigoInm ::= bloqueCodigoInm:blqInm write:write {: reglas.add(new Regla (4, "<bloqueCodigoInm> ::= <bloqueCodigoInm> <write>")); RESULT = (String) blqInm + write; :}
                  | write:write {: reglas.add(new Regla(5, "<bloqueCodigoInm> ::= <write>")); RESULT = write; :};

declaracion ::= ABRIR_DECLA:opendecl variables:vars CERRAR_DECLA:enddecl programa:prog {: reglas.add(new Regla(6, "<declaracion> ::= " + opendecl + " <variables> " + enddecl + " <programa>"));
                                                                                            matchingTypes();
                                                                                          RESULT = (String) opendecl + vars + enddecl + prog;
                                                                                        :};

variables ::= ABRIR_LISTA:openl ID:id incrementar:incr type:type CERRAR_LISTA:endl TOK_EOI:eoi {: reglas.add(new Regla(7, "<variables> ::= " + openl + " ID <incrementar> <type>" + endl + eoi));
                                                                                                    IDs.add((String) id); tipos.add((String) type);
                                                                                                  RESULT = (String) openl + id + incr + type + endl + eoi;
                                                                                                :}
            | variables:vars ABRIR_LISTA:openl ID:id incrementar:incr type:type CERRAR_LISTA:endl TOK_EOI:eoi {: reglas.add(new Regla(8, "<variables> ::= <variables> " + openl + " ID <incrementar> <type>" + endl + eoi));
                                                                                                                    IDs.add((String) id); tipos.add((String) type);
                                                                                                                    RESULT = (String) openl + id + incr + type + endl + eoi;
                                                                                                              :};

incrementar ::= TOK_SEP:sep ID:id incrementar:incr type:type TOK_SEP {: reglas.add(new Regla(9, "<incrementar> ::= " + sep + " ID <incrementar> <type> " + sep)); RESULT = (String) sep + id + incr + type + sep;
                                                                        IDs.add((String) id); tipos.add((String) type);
                                                                      :}
              | CERRAR_LISTA:endl OP_DECLA:decl ABRIR_LISTA:openl {: reglas.add(new Regla(10, "<incrementar> ::= " + endl + decl + openl)); RESULT = (String) endl + decl + openl; :};

type ::= TYPE_INT:tint {: reglas.add(new Regla (11, "<type> ::= " + tint )); RESULT = tint; :}
       | TYPE_FLOAT:tfloat {: reglas.add(new Regla (12, "<type> ::= " + tfloat)); RESULT = tfloat; :}
       | TYPE_STR:tstr {: reglas.add(new Regla (13, "<type> ::= " + tstr)); RESULT = tstr; :};

programa ::= ABRIR_PROG:openprog bloqueCodigo:bloq CERRAR_PROG:endprog {: reglas.add(new Regla (14, "<programa> ::= " + openprog + " <bloqueCodigo> " + endprog)); RESULT = (String) openprog + bloq + endprog; :};

bloqueCodigo ::= bloqueCodigo:bloq instruccion:inst {: reglas.add(new Regla (15, "<bloqueCodigo> ::= <bloqueCodigo> <instruccion>")); RESULT = (String) bloq + inst; :}
               | instruccion:inst {: reglas.add(new Regla(16, "<bloque> ::= <instruccion>")); RESULT = inst; :};

instruccion ::= while:w {: reglas.add(new Regla(17, "<instruccion> ::= <while>")); RESULT = w; :}
              | if:i {: reglas.add(new Regla(18, "<instruccion> ::= <if>")); RESULT = i; :}
              | write:write {: reglas.add(new Regla (19, "<instruccion> ::= <write>")); RESULT = write; :}
              | RETURN:ret {: reglas.add(new Regla(20, "<instruccion> ::= " + ret)); RESULT = ret; :}
              | asignacion:asig {: reglas.add(new Regla (21,"<instruccion> ::= <asignacion>")); RESULT = asig; :}
              | function:fn TOK_EOI:eoi {: reglas.add(new Regla(22, "<instruccion> ::= <function> " + eoi)); RESULT = (String) fn + eoi; :};

while ::= CL_WHILE:w ABRIR_COND:opencl condicion:cond CERRAR_COND:endcl ABRIR_BLOQUE:openbl bloqueCodigo:bloq CERRAR_BLOQUE:endbl {: reglas.add(new Regla (23, "<while> ::= " + w + opencl + " <condicion> " + endcl + openbl + " <bloqueCodigo> " + endbl));
                                                                                                                                     RESULT = (String) w + opencl + cond + endcl + openbl + bloq + endbl;
                                                                                                                                   :};

if ::= DECL_IF:i ABRIR_COND:opencl condicion:cond CERRAR_COND:endcl ABRIR_BLOQUE:openbl bloqueCodigo:bloq CERRAR_BLOQUE:endbl {: reglas.add(new Regla (24, "<if> ::= " + i + opencl + " <condicion> " + endcl + openbl + " <bloqueCodigo>" + endbl));
                                                                                                                                        RESULT = (String) i + opencl + cond + endcl + openbl + bloq + endbl;
                                                                                                                                      :}
     | DECL_IF:i ABRIR_COND:opencl condicion:cond CERRAR_COND:endcl ABRIR_BLOQUE:openbl bloqueCodigo:bloq CERRAR_BLOQUE:endbl else:el {: reglas.add(new Regla (25, "<if> ::= " + i + opencl + " <condicion> " + endcl + openbl + " <bloqueCodigo> " + endbl + el)); RESULT = (String) i + opencl + cond + endcl + openbl + bloq + endbl + el; :}
     | DECL_IF:i ABRIR_COND:opencl condicion:cond CERRAR_COND:endcl ABRIR_BLOQUE:openbl bloqueCodigo:bloq CERRAR_BLOQUE:endbl elif:elif{: reglas.add(new Regla (26, "<if> ::= " + i + opencl + " <condicion> " + endcl + openbl + " <bloqueCodigo> " + endbl + "<elif>")); RESULT = (String) i + opencl + cond + endcl + openbl + bloq + endbl + elif; :}
     | DECL_IF:i ABRIR_COND:opencl condicion:cond CERRAR_COND:endcl ABRIR_BLOQUE:openbl bloqueCodigo:bloq CERRAR_BLOQUE:endbl elif:elif else:els {: reglas.add(new Regla (27, "<if> ::= " + i + opencl + " <condicion> " + endcl + openbl + " <bloqueCodigo> " + endbl + " <elif> <else>")); RESULT = (String) i + opencl + cond + endcl + openbl + bloq + endbl + elif + els; :};

elif ::= DECL_ELIF:e ABRIR_COND:opencl condicion:cond CERRAR_COND:endcl ABRIR_BLOQUE:openbl bloqueCodigo:bloq CERRAR_BLOQUE:endbl {: reglas.add(new Regla (28, "<elif> ::= " + e + opencl + " <condicion> " + endcl + openbl + " <bloqueCodigo> " + endbl));
                                                                                                                                    RESULT = (String) e + opencl + cond + endcl + openbl + bloq + endbl;
                                                                                                                                   :}
       | DECL_ELIF:elif ABRIR_COND:opencl condicion:cond CERRAR_COND:endcl ABRIR_BLOQUE:openbl bloqueCodigo:bloq CERRAR_BLOQUE:endbl elif:el{:
                        reglas.add(new Regla (29, "<elif> ::= " + elif + opencl + " <condicion> " + endcl + openbl + " <bloqueCodigo> " + endbl + "<elif>"));
                        RESULT = (String) elif + opencl + cond + endcl + openbl + bloq + endbl + el;                                       :};

else ::= DECL_ELSE:el ABRIR_BLOQUE:ab bloqueCodigo:bloq CERRAR_BLOQUE:cb {: reglas.add(new Regla (30, "<else> ::= " + el + ab + " <bloqueCodigo> " + cb)); RESULT = (String) el + ab + bloq + cb; :};


condicion ::= comparacion:comp {: reglas.add(new Regla (31, "<condicion> ::= <comparacion>")); RESULT = comp;:}
            | OP_NOT:opnot comparacion:comp {: reglas.add(new Regla (32, "<condicion> ::= " + opnot + "<comparacion>")); RESULT = (String) opnot + comp; :}
            | comparacion:comp OP_AND:opand comparacion:comp2 {: reglas.add(new Regla (33, "<condicion> ::= <comparacion> " + opand + " <comparacion>")); RESULT = (String) comp + opand + comp2; :}
            | comparacion:comp OP_OR:opor comparacion:comp2 {: reglas.add(new Regla (34, "<condicion> ::= <comparacion> " + opor + " <comparacion>")); RESULT = (String) comp + opor + comp2; :};

comparacion ::= expresion:exp comparador:compr expresion:exp2 {: reglas.add(new Regla (35, "<comparacion> ::= <expresion> <comparador> <expresion>")); RESULT = (String) exp + compr + exp2; :}
               | ABRIR_COND:ac comparacion:com CERRAR_COND:cc {: reglas.add(new Regla(36, "<comparacion> ::= " + ac + " <comparacion> " + cc)); RESULT = (String) ac + com + cc; :};

comparador ::= COND_IGUAL:i {: reglas.add(new Regla (37, "<comparador> ::= " + i)); RESULT = i; :}
             | COND_DIST:d {: reglas.add(new Regla (38, "<comparador> ::= " + d)); RESULT = d; :}
             | COND_MAYOR:may {: reglas.add(new Regla (39, "<comparador> ::= " + may)); RESULT = may; :}
             | COND_MENOR:men {: reglas.add(new Regla (40, "<comparador> ::= " + men)); RESULT = men; :}
             | COND_MAYORI:mayi {: reglas.add(new Regla (41, "<comparador> ::= " + mayi)); RESULT = mayi; :}
             | COND_MENORI:meni {: reglas.add(new Regla (42, "<comparador> ::= " + meni)); RESULT = meni; :};

expresion ::= expresion:exp OP_SUMA:suma termino:term {: reglas.add(new Regla (43, "<expresion> ::= <expresion> " + suma + " <termino>")); RESULT = (String) exp + suma + term; :}
            | expresion:exp OP_RESTA:resta termino:term {: reglas.add(new Regla (44, "<expresion> ::= <expresion> " + resta + " <termino>")); RESULT = (String) exp + resta + term; :}
            | termino:term {: reglas.add(new Regla (45, "<expresion> ::= <termino>")); RESULT = term; :};

termino ::= termino:term OP_PROD:prod factor:fact {: reglas.add(new Regla (46, "<termino> ::= <termino> " + prod + " <factor> valor = " + fact)); RESULT = (String) term + prod + fact; :}
          | termino:term OP_DIV:div factor:fact {: reglas.add(new Regla (47, "<termino> ::= <termino> " + div + " <factor> valor = " + fact)); RESULT = (String) term + div + fact; :}
          | factor:fact {: reglas.add(new Regla (48, "<termino> ::= <factor> valor = " + fact)); RESULT = fact; :};

factor ::= ID:id {: reglas.add(new Regla (49, "<factor> ::= " + id)); RESULT = id; :}
         | CTE_BIN:bin {: reglas.add(new Regla (50, "<factor> ::= " + bin)); RESULT = bin; :}
         | CTE_INT:ent {: reglas.add(new Regla (51, "<factor> ::= " + ent)); RESULT = ent; :}
         | CTE_REAL:r {: reglas.add(new Regla (52, "<factor> ::= " + r)); RESULT = r; :}
         | function:func {: reglas.add(new Regla (53, "<factor> ::= " + func)); RESULT = func; :}
         | ABRIR_COND:para expresion:ex CERRAR_COND:parc {: reglas.add(new Regla(54, "<factor> ::= " + para + " <expresion> " + parc)); RESULT = (String) para + ex + parc; :};

write ::= OUTPUT:out factor:fact TOK_EOI:eoi {: reglas.add(new Regla (55, "<write> ::= " + out + " <factor> " + eoi)); RESULT = (String) out + fact + eoi; :}
        | OUTPUT:out CTE_STRING:str TOK_EOI:eoi {: reglas.add(new Regla (56, "<write> ::= " + out + " " + str + " " + eoi)); RESULT = (String) out + str + eoi; :} ;

asignacion ::= ID:id OP_ASIGN:asig expresion:exp TOK_EOI:eoi {: reglas.add(new Regla (57, "<asignacion> ::= " + id + " " + asig + " <expresion> " + eoi)); RESULT = (String) id + asig + exp + eoi; :}
              |ID:id OP_ASIGN:asig CTE_STRING:str TOK_EOI:eoi {: reglas.add(new Regla (58, "<asignacion> ::= " + id + " " + asig + str + eoi)); RESULT = (String) id + asig + str + eoi; :}         ;

function ::= FUNC_COUNTDISTINCT:f ABRIR_COND:ac expresion:exp TOK_DOSP:d ABRIR_LISTA:al lista:lista CERRAR_LISTA:cl CERRAR_COND:cc
                {: reglas.add(new Regla (59, "<function> ::= " + f + ac + " <expresion> " + d + " " + al + " <lista> " + cl + cc));
                   RESULT = (String) f + ac + exp + d + al + lista + cl + cc;
                :};

lista ::= lista:lista TOK_SEP:sep ID:id {: reglas.add(new Regla (60, "<lista> ::= <lista> " + sep + id)); RESULT = (String) lista + sep + id; :}
        | lista:lista TOK_SEP:sep CTE_INT:ent {: reglas.add(new Regla (61, "<lista> ::= <lista> " + sep + ent)); RESULT = (String) lista + sep + ent; :}
        | lista:lista TOK_SEP:sep CTE_REAL:real {: reglas.add(new Regla (62, "<lista> ::= <lista> " + sep + real)); RESULT = (String) lista + sep + real; :}
        | CTE_INT:ent {: reglas.add(new Regla (63, "<lista> ::= " + ent)); RESULT = ent; :}
        | CTE_REAL:real {: reglas.add(new Regla (64, "<lista> ::= " + real)); RESULT = real; :}
        | ID:id {: reglas.add(new Regla (65, "<lista> ::= " + id)); RESULT = id; :};
