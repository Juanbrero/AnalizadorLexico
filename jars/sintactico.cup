import java_cup.runtime.*;
import java.util.ArrayList;
import representaciones.Regla;

parser code
{:
    private Symbol symbol;
    private ArrayList<Regla> reglas = new ArrayList<Regla>();

    /* Metodo al que se llama automaticamente ante algun error sintactico*/
    public void syntax_error(Symbol s) {
        this.symbol = s;

        // Extraer información relevante
        int linea = s.right + 1;
        int columna = s.left;
        Object valor = s.value;

        // Construir el mensaje de error
        StringBuilder mensaje = new StringBuilder();
        mensaje.append("¡ERROR DE SINTAXIS ENCONTRADO!\nDetalles:\n");
        mensaje.append("    - Línea: ").append(linea).append("\n");
        mensaje.append("    - Columna: ").append(columna).append("\n");
        mensaje.append("    - Token no reconocido: '").append(valor).append("'\n");
        // Posible sugerencia de corrección
        mensaje.append("Sugerencia: Revisa el uso de los símbolos o palabras clave cerca de esta posición.\n");

        System.out.println(mensaje.toString());

        mostrarReglas();
    }

    public Symbol getSymbol(){
        return this.symbol;
    }

    public void mostrarReglas(){
        System.out.println("\n\nESTADO DE LAS REGLAS LEÍDAS:\n");
        int contador = 1;
        for(Regla regla:reglas){
            System.out.println("Orden de aplicación: " + contador + "  " + regla.getReglaSinFormato() + "\n");
            contador += 1;
        }
    }

    public ArrayList<Regla> getReglas(){
        return reglas;
    }
:}

action code
{:

:}

/* Declaracion de Terminales */
terminal ID, CTE_INT, CTE_BIN, CTE_REAL, CTE_STRING, ESPACIO, COMENTARIOS, NUMERICO, ALFANUM, ALFABETICO,
         OP_DECLA, OP_ASIGN, OP_SUMA, OP_RESTA, OP_PROD, OP_DIV, OP_AND, OP_OR, OP_NOT,
         COND_IGUAL, COND_DIST, COND_MAYOR, COND_MENOR, COND_MAYORI, COND_MENORI,
         CL_WHILE, DECL_IF, DECL_ELIF, DECL_ELSE, OUTPUT, RETURN, ABRIR_DECLA, CERRAR_DECLA, ABRIR_PROG, CERRAR_PROG, FUNC_COUNTDISTINCT,
         ABRIR_LISTA, CERRAR_LISTA, ABRIR_COND, CERRAR_COND, ABRIR_BLOQUE, CERRAR_BLOQUE, TOK_EOI, TOK_SEP, TOK_DOSP,
         TYPE_INT, TYPE_FLOAT, TYPE_STR;

/* Declaracion de No Terminales */
non terminal s, prog_inmutable, bloqueCodigoInm, declaracion, variables, incrementar, type, programa, bloqueCodigo,
             instruccion, while, if, elif, else, condicion, comparacion, comparador, expresion, termino, factor, write, asignacion, function, lista;


start with s;

s ::= declaracion:decl {: mostrarReglas(); reglas.add(new Regla(0, "start --> declaracion")); RESULT = decl; :}
    | prog_inmutable:progInm {: mostrarReglas(); reglas.add(new Regla(1, "start --> prog sin variables")); RESULT = progInm; :};

prog_inmutable ::= ABRIR_PROG:openprog bloqueCodigoInm:blqInm CERRAR_PROG:endprog {: reglas.add(new Regla(2, "prog sin variables --> " + openprog + " <bloque> " + endprog)); RESULT = (String) openprog + blqInm + endprog; :};

bloqueCodigoInm ::= bloqueCodigoInm:blqInm write:write {: reglas.add(new Regla (3, "bloque --> <bloque> <write>")); RESULT = (String) blqInm + write; :}
                  | write:write {: reglas.add(new Regla(4, "bloque --> <write>")); RESULT = write; :};

declaracion ::= ABRIR_DECLA:opendecl variables:vars CERRAR_DECLA:enddecl programa:prog {: reglas.add(new Regla(5, "declaracion --> " + opendecl + " <variables> " + enddecl + " <programa>"));
                                                                                          RESULT = (String) opendecl + vars + enddecl + prog;
                                                                                        :};

variables ::= ABRIR_LISTA:openl ID:id incrementar:incr type:type CERRAR_LISTA:endl TOK_EOI:eoi {: reglas.add(new Regla(6, "variables --> " + openl + "ID= " + id + " <incrementar> Tipo= " + type + endl + eoi));
                                                                                                  RESULT = (String) openl + id + incr + type + endl + eoi;
                                                                                                :};

incrementar ::= TOK_SEP:sep ID:id incrementar:incr type:type TOK_SEP {: reglas.add(new Regla(7, "incrementar --> " + sep + " ID= " + id + " <incrementar> Tipo= " + type + sep)); RESULT = (String) sep + id + incr + type + sep; :}
              | CERRAR_LISTA:endl OP_DECLA:decl ABRIR_LISTA:openl {: reglas.add(new Regla(8, "incrementar --> " + endl + decl + openl)); RESULT = (String) endl + decl + openl; :};

type ::= TYPE_INT:tint {: reglas.add(new Regla (9, "type --> " + tint )); RESULT = tint; :}
       | TYPE_FLOAT:tfloat {: reglas.add(new Regla (10, "type --> " + tfloat)); RESULT = tfloat; :}
       | TYPE_STR:tstr {: reglas.add(new Regla (11, "type --> " + tstr)); RESULT = tstr; :};

programa ::= ABRIR_PROG:openprog bloqueCodigo:bloq CERRAR_PROG:endprog {: reglas.add(new Regla (12, "programa --> " + openprog + " <bloque> " + endprog)); RESULT = (String) openprog + bloq + endprog; :};

bloqueCodigo ::= bloqueCodigo:bloq instruccion:inst {: reglas.add(new Regla (13, "bloque --> <bloque> <instruccion>")); RESULT = (String) bloq + inst; :}
               | instruccion:inst {: reglas.add(new Regla(14, "bloque --> <instruccion>")); RESULT = inst; :};

instruccion ::= while:w {: reglas.add(new Regla(15, "instruccion --> <while>")); RESULT = w; :}
              | if:i {: reglas.add(new Regla(16, "instruccion --> <if>")); RESULT = i; :}
              | write:write {: reglas.add(new Regla (17, "instruccion --> <write>")); RESULT = write; :}
              | RETURN:ret {: reglas.add(new Regla(18, "instruccion --> " + ret)); RESULT = ret; :}
              | asignacion:asig {: reglas.add(new Regla (19,"instruccion --> <asignacion>")); RESULT = asig; :};

while ::= CL_WHILE:w ABRIR_COND:opencl condicion:cond CERRAR_COND:endcl ABRIR_BLOQUE:openbl bloqueCodigo:bloq CERRAR_BLOQUE:endbl {: reglas.add(new Regla (20, "while --> " + w + opencl + "<condicion>" + endcl + openbl + "<bloque>" + endbl));
                                                                                                                                     RESULT = (String) w + opencl + cond + endcl + openbl + bloq + endbl;
                                                                                                                                   :};

if ::= DECL_IF:i ABRIR_COND:opencl condicion:cond CERRAR_COND:endcl ABRIR_BLOQUE:openbl bloqueCodigo:bloq CERRAR_BLOQUE:endbl {: reglas.add(new Regla (21, "if --> " + i + opencl + "<condicion>" + endcl + openbl + "<bloque>" + endbl));
                                                                                                                                        RESULT = (String) i + opencl + cond + endcl + openbl + bloq + endbl;
                                                                                                                                      :}
     | DECL_IF:i ABRIR_COND:opencl condicion:cond CERRAR_COND:endcl ABRIR_BLOQUE:openbl bloqueCodigo:bloq CERRAR_BLOQUE:endbl else:el {: reglas.add(new Regla (22, "if --> " + i + opencl + "<condicion>" + endcl + openbl + "<bloque>" + endbl + el)); RESULT = (String) i + opencl + cond + endcl + openbl + bloq + endbl + el; :}
     | DECL_IF:i ABRIR_COND:opencl condicion:cond CERRAR_COND:endcl ABRIR_BLOQUE:openbl bloqueCodigo:bloq CERRAR_BLOQUE:endbl elif:e {: reglas.add(new Regla (23, "if --> " + i + opencl + "<condicion>" + endcl + openbl + "<bloque>" + endbl + e)); RESULT = (String) i + opencl + cond + endcl + openbl + bloq + endbl + e; :};

elif ::= DECL_ELIF:e ABRIR_COND:opencl condicion:cond CERRAR_COND:endcl ABRIR_BLOQUE:openbl bloqueCodigo:bloq CERRAR_BLOQUE:endbl {: reglas.add(new Regla (24, "elif --> " + e + opencl + "<condicion>" + endcl + openbl + "<bloque>" + endbl));
                                                                                                                                                    RESULT = (String) e + opencl + cond + endcl + openbl + bloq + endbl;
                                                                                                                                                  :}
       | elif:e else:el {: reglas.add(new Regla (25, "elif --> <elif> <else>")); RESULT = (String) e + el; :};

else ::= DECL_ELSE:el ABRIR_BLOQUE:ab bloqueCodigo:bloq CERRAR_BLOQUE:cb {: reglas.add(new Regla (26, "else --> " + el + ab + "<bloque>" + cb)); RESULT = (String) el + ab + bloq + cb; :};


condicion ::= comparacion:comp {: reglas.add(new Regla (27, "condicion --> <comparacion>")); RESULT = comp;:}
            | OP_NOT:opnot comparacion:comp {: reglas.add(new Regla (28, "condicion --> " + opnot + "<comparacion>")); RESULT = (String) opnot + comp; :}
            | comparacion:comp OP_AND:opand comparacion:comp2 {: reglas.add(new Regla (29, "condicion --> <comparacion> " + opand + " <comparacion>")); RESULT = (String) comp + opand + comp2; :}
            | comparacion:comp OP_OR:opor comparacion:comp2 {: reglas.add(new Regla (30, "condicion --> <comparacion> " + opor + " <comparacion>")); RESULT = (String) comp + opor + comp2; :};

comparacion ::= expresion:exp comparador:compr expresion:exp2 {: reglas.add(new Regla (31, "comparacion --> <expresion> <comparador> <expresion>")); RESULT = (String) exp + compr + exp2; :};

comparador ::= COND_IGUAL:i {: reglas.add(new Regla (32, "comparador --> " + i)); RESULT = i; :}
             | COND_DIST:d {: reglas.add(new Regla (33, "comparador --> " + d)); RESULT = d; :}
             | COND_MAYOR:may {: reglas.add(new Regla (34, "comparador --> " + may)); RESULT = may; :}
             | COND_MENOR:men {: reglas.add(new Regla (35, "comparador --> " + men)); RESULT = men; :}
             | COND_MAYORI:mayi {: reglas.add(new Regla (36, "comparador --> " + mayi)); RESULT = mayi; :}
             | COND_MENORI:meni {: reglas.add(new Regla (37, "comparador --> " + meni)); RESULT = meni; :};

expresion ::= expresion:exp OP_SUMA:suma termino:term {: reglas.add(new Regla (38, "expresion --> <expresion> " + suma + " <termino>")); RESULT = (String) exp + suma + term; :}
            | expresion:exp OP_RESTA:resta termino:term {: reglas.add(new Regla (39, "expresion --> <expresion> " + resta + " <termino>")); RESULT = (String) exp + resta + term; :}
            | termino:term {: reglas.add(new Regla (40, "expresion --> <termino>")); RESULT = term; :};

termino ::= termino:term OP_PROD:prod factor:fact {: reglas.add(new Regla (41, "termino --> <termino> " + prod + " <factor> valor= " + fact)); RESULT = (String) term + prod + fact; :}
          | termino:term OP_DIV:div factor:fact {: reglas.add(new Regla (42, "termino --> <termino> " + div + " <factor> valor= " + fact)); RESULT = (String) term + div + fact; :}
          | factor:fact {: reglas.add(new Regla (43, "termino --> <factor> valor= " + fact)); RESULT = fact; :};

factor ::= ID:id {: reglas.add(new Regla (44, "factor --> ID= " + id)); RESULT = id; :}
         | CTE_BIN:bin {: reglas.add(new Regla (45, "factor --> " + bin)); RESULT = bin; :}
         | CTE_INT:ent {: reglas.add(new Regla (46, "factor --> " + ent)); RESULT = ent; :}
         | CTE_REAL:r {: reglas.add(new Regla (47, "factor --> " + r)); RESULT = r; :}
         | CTE_STRING:st {: reglas.add(new Regla (48, "factor --> " + st)); RESULT = st; :}
         | function:func {: reglas.add(new Regla (49, "factor --> " + func)); RESULT = func; :};

write ::= OUTPUT:out factor:fact TOK_EOI:eoi {: reglas.add(new Regla (50, "write --> " + out + " <factor> " + eoi)); RESULT = (String) out + fact + eoi; :};

asignacion ::= ID:id OP_ASIGN:asig expresion:exp TOK_EOI:eoi {: reglas.add(new Regla (51, "asignacion --> ID= " + id + asig + "<expresion>" + eoi)); RESULT = (String) id + asig + exp + eoi; :};

function ::= FUNC_COUNTDISTINCT:f ABRIR_COND:ac expresion:exp TOK_DOSP:d ABRIR_LISTA:al lista:lista CERRAR_LISTA:cl CERRAR_COND:cc TOK_EOI:eoi
                {: reglas.add(new Regla (52, "function --> " + f + ac + "<expresion>" + d + al + "<lista>" + cl + cc + eoi));
                   RESULT = (String) f + ac + exp + d + al + lista + cl + cc + eoi;
                :};

lista ::= lista:lista TOK_SEP:sep ID:id {: reglas.add(new Regla (53, "lista --> <lista> " + sep + id)); RESULT = (String) lista + sep + id; :}
        | lista:lista TOK_SEP:sep CTE_INT:ent {: reglas.add(new Regla (54, "lista --> <lista> " + sep + ent)); RESULT = (String) lista + sep + ent; :}
        | lista:lista TOK_SEP:sep CTE_REAL:real {: reglas.add(new Regla (55, "lista --> <lista> " + sep + real)); RESULT = (String) lista + sep + real; :}
        | CTE_INT:ent {: reglas.add(new Regla (56, "lista --> " + ent)); RESULT = ent; :}
        | CTE_REAL:real {: reglas.add(new Regla (57, "lista --> " + real)); RESULT = real; :}
        | ID:id {: reglas.add(new Regla (58, "lista --> " + id)); RESULT = id; :};
